package xmlwriter

import (
	"bytes"
	"encoding/xml"
	"errors"
	"fmt"
	"io"
	"os"
	"strings"
	"testing"
)

func ExampleNew_xhtml() {
	const (
		xhtml NS = "http://www.w3.org/1999/xhtml"
		svg   NS = "http://www.w3.org/2000/svg"
		xlink NS = "http://www.w3.org/1999/xlink"
	)

	x := New(os.Stdout)
	x.Indent("    ")

	x.DefaultProcInst()
	x.Directive([]byte("DOCTYPE html"))
	x.Start(xhtml, "html", BoundNS{xhtml, ""})
	{
		x.Start(xhtml, "head")
		{
			x.Start(xhtml, "title")
			x.Text(false, "Document Title")
			x.End(false)
		}
		{
			x.Start(xhtml, "link")
			x.Attr(xhtml, "rel", "stylesheet")
			x.Attr(xhtml, "href", "style.css")
			x.End(true)
		}
		{
			x.Start(xhtml, "style")
			x.Text(true, "svg {")
			x.Text(true, "    width: 20px;")
			x.Text(true, "    fill: black;")
			x.Text(true, "}")
			x.End(false)
		}
		x.End(false)
	}
	{
		x.Start(xhtml, "body")
		{
			x.Start(xhtml, "p")
			x.Text(false, "This is an example document generated by ")
			{
				x.Start(xhtml, "i")
				x.Text(false, "xmlwriter")
				x.End(false)
			}
			x.Text(false, ".")
			x.Text(true, "")
			x.End(false)
		}
		x.BlankLine()
		{
			x.Start(svg, "svg", BoundNS{svg, ""}, BoundNS{xlink, "xlink"})
			x.Attr(svg, "viewBox", "0 0 20 20")
			{
				x.Start(svg, "a")
				x.Attr(xlink, "href", "https://example.com")
				{
					x.Start(svg, "circle")
					x.Attr(svg, "cx", "10")
					x.Attr(svg, "cy", "10")
					x.Attr(svg, "r", "8")
					x.End(true)
				}
				x.End(false)
			}
			x.End(false)
		}
		x.End(false)
	}
	x.End(false)

	if err := x.Err(); err != nil {
		fmt.Fprintf(os.Stderr, "\nError: %v\n", err)
		os.Exit(1)
	}

	// Output:
	// <?xml version="1.0" encoding="UTF-8"?>
	// <!DOCTYPE html>
	// <html xmlns="http://www.w3.org/1999/xhtml">
	//     <head>
	//         <title>Document Title</title>
	//         <link rel="stylesheet" href="style.css"/>
	//         <style>
	//             svg {
	//                 width: 20px;
	//                 fill: black;
	//             }
	//         </style>
	//     </head>
	//     <body>
	//         <p>This is an example document generated by <i>xmlwriter</i>.
	//         </p>
	//
	//         <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 20 20">
	//             <a xlink:href="https://example.com">
	//                 <circle cx="10" cy="10" r="8"/>
	//             </a>
	//         </svg>
	//     </body>
	// </html>
}

func TestWriter(t *testing.T) {
	out := func(s string) string {
		const (
			i = "\t\t\t"
			p = "\n" + i + "\t"
		)
		s = strings.ReplaceAll(s, "\r", "")
		if !strings.HasPrefix(s, p) || !strings.HasSuffix(s, i) {
			panic("failed to remove indentation")
		}
		return strings.TrimSuffix(strings.ReplaceAll(strings.TrimPrefix(s, p), p, "\n"), i)
	}
	for _, tc := range []struct {
		Name       string
		Do         func(*XMLWriter)
		Out        string
		NoValidate bool
	}{
		{
			Name: "ProcInstNoIndent",
			Do: func(x *XMLWriter) {
				x.DefaultProcInst()
			},
			Out: strings.TrimRight(out(`
				<?xml version="1.0" encoding="UTF-8"?>
			`), "\n"),
		},
		{
			Name: "ProcInstIndent",
			Do: func(x *XMLWriter) {
				x.Indent("\t")
				x.DefaultProcInst()
			},
			Out: out(`
				<?xml version="1.0" encoding="UTF-8"?>
			`),
		},
		{
			Name: "NoElementEnd",
			Do: func(x *XMLWriter) {
				x.Indent("\t")
				x.Start(nil, "test", BoundNS{})
			},
		},
		{
			Name: "NoElementStart",
			Do: func(x *XMLWriter) {
				x.Indent("\t")
				x.End(false)
			},
		},
		{
			Name: "NoElementForText",
			Do: func(x *XMLWriter) {
				x.Indent("\t")
				x.Text(false, "test")
			},
		},
		{
			Name: "Raw",
			Do: func(x *XMLWriter) {
				x.Raw([]byte("><><>>>><<<<<>>>"))
			},
			Out:        "><><>>>><<<<<>>>",
			NoValidate: true,
		},
		{
			Name: "RawInElement",
			Do: func(x *XMLWriter) {
				x.Start(nil, "test", BoundNS{})
				x.Raw([]byte("><><>>>><<<<<>>>"))
				x.End(false)
			},
			Out:        "<test>><><>>>><<<<<>>></test>",
			NoValidate: true,
		},
		{
			Name: "ProcInstInElement",
			Do: func(x *XMLWriter) {
				x.Indent("\t")
				x.Start(nil, "test", BoundNS{})
				x.ProcInst("sdf", "dfg")
				x.End(false)
			},
			Out: out(`
				<test>
					<?sdf dfg?>
				</test>
			`),
		},
		{
			Name: "NoElementForAttr",
			Do: func(x *XMLWriter) {
				x.Indent("\t")
				x.Attr(nil, "test", "test")
			},
		},
		{
			Name: "SelfClosingElement",
			Do: func(x *XMLWriter) {
				x.Indent("\t")
				x.Start(nil, "test", BoundNS{})
				x.End(true)
			},
			Out: out(`
				<test/>
			`),
		},
		{
			Name: "SelfClosingElementAttr",
			Do: func(x *XMLWriter) {
				x.Indent("\t")
				x.Start(nil, "test", BoundNS{})
				x.Attr(nil, "test", "test")
				x.End(true)
			},
			Out: out(`
				<test test="test"/>
			`),
		},
		{
			Name: "DuplicateAttr",
			Do: func(x *XMLWriter) {
				x.Indent("\t")
				x.Start(nil, "test", BoundNS{})
				x.Attr(nil, "test", "test")
				x.Attr(nil, "test", "test")
				x.End(true)
			},
		},
		{
			Name: "DuplicateAttrNS",
			Do: func(x *XMLWriter) {
				ns := NS("https://example.com/ns")
				x.Indent("\t")
				x.Start(ns, "test", BoundNS{ns, ""}, BoundNS{ns, "test"})
				x.Attr(ns, "test", "test")
				x.Attr(BoundNS{ns, "test"}, "test", "test")
				x.End(true)
			},
		},
		{
			Name: "InvalidAttrNSPrefix1",
			Do: func(x *XMLWriter) {
				x.Indent("\t")
				x.Start(nil, "test", BoundNS{})
				x.Attr(Prefix("."), "test", "test")
				x.End(true)
			},
		},
		{
			Name: "InvalidNSPrefix1",
			Do: func(x *XMLWriter) {
				x.Indent("\t")
				x.Start(nil, "test", BoundNS{"https://example.com/ns1", "."})
				x.End(true)
			},
		},
		{
			Name: "InvalidNSPrefix2",
			Do: func(x *XMLWriter) {
				x.Indent("\t")
				x.Start(nil, "test", BoundNS{}, BoundNS{"", "test"})
				x.End(true)
			},
		},
		{
			Name: "InvalidNSPrefix3",
			Do: func(x *XMLWriter) {
				x.Indent("\t")
				x.Start(nil, "test", BoundNS{}, BoundNS{"https://example.com/ns1", "test"}, BoundNS{"https://example.com/ns1", "test"})
				x.End(true)
			},
		},
		{
			Name: "UnboundAttrNSPrefix1",
			Do: func(x *XMLWriter) {
				x.Indent("\t")
				x.Start(nil, "test", BoundNS{})
				x.Attr(Prefix("test"), "test", "test")
				x.End(true)
			},
		},
		{
			Name: "UnboundAttrNSPrefix2",
			Do: func(x *XMLWriter) {
				ns := NS("https://example.com/ns")
				x.Indent("\t")
				x.Start(ns, "test", BoundNS{ns, ""})
				x.Attr(Prefix("test"), "test", "test")
				x.End(true)
			},
		},
		{
			Name: "UnboundAttrNS",
			Do: func(x *XMLWriter) {
				x.Indent("\t")
				x.Start(nil, "test", BoundNS{})
				x.Attr(NS("https://example.com/ns"), "test", "test")
				x.End(true)
			},
		},
		{
			Name: "WrongAttrDefaultNS1",
			Do: func(x *XMLWriter) {
				x.Indent("\t")
				x.Start(nil, "test", BoundNS{"https://example.com/ns", ""})
				x.Attr(BoundNS{"https://example.com/ns1", ""}, "test", "test")
				x.End(true)
			},
		},
		{
			Name: "WrongAttrDefaultNS2",
			Do: func(x *XMLWriter) {
				x.Indent("\t")
				x.Start(nil, "test", BoundNS{"https://example.com/ns", ""})
				x.Attr(NS("https://example.com/ns1"), "test", "test")
				x.End(true)
			},
		},
		{
			Name: "WrongAttrPrefixNestedNS",
			Do: func(x *XMLWriter) {
				x.Indent("\t")
				x.Start(nil, "test", BoundNS{"https://example.com/ns1", "ns"})
				x.Start(nil, "test", BoundNS{"https://example.com/ns", "ns"})
				x.Attr(BoundNS{"https://example.com/ns1", "ns"}, "test", "test")
				x.End(true)
				x.End(false)
			},
		},
		{
			Name: "MultipleAttrNS",
			Do: func(x *XMLWriter) {
				ns := NS("https://example.com/ns")
				ns1 := NS("https://example.com/ns1")
				x.Indent("\t")
				x.Start(ns, "test", BoundNS{ns, ""}, BoundNS{ns1, "test"})
				x.Attr(ns, "test", "test")
				x.Attr(BoundNS{ns1, "test"}, "test", "test")
				x.End(true)
			},
			Out: out(`
				<test xmlns="https://example.com/ns" xmlns:test="https://example.com/ns1" test="test" test:test="test"/>
			`),
		},
		{
			Name: "WrongPrefixNestedNS",
			Do: func(x *XMLWriter) {
				x.Indent("\t")
				x.Start(nil, "test", BoundNS{}, BoundNS{"https://example.com/ns1", "ns"})
				x.Start(nil, "test", BoundNS{"https://example.com/ns", ""})
				x.Start(BoundNS{"https://example.com/ns", "ns"}, "test")
				x.End(true)
				x.End(false)
				x.End(false)
			},
		},
		{
			Name: "Element",
			Do: func(x *XMLWriter) {
				x.Indent("\t")
				x.Start(nil, "test", BoundNS{})
				x.End(false)
			},
			Out: out(`
				<test></test>
			`),
		},
		{
			Name: "DirectiveInElement",
			Do: func(x *XMLWriter) {
				x.Indent("\t")
				x.Start(nil, "test", BoundNS{})
				x.Directive([]byte("test"))
				x.End(false)
			},
			Out: out(`
				<test>
					<!test>
				</test>
			`),
		},
		{
			Name: "BlankLine",
			Do: func(x *XMLWriter) {
				x.Indent("\t")
				x.DefaultProcInst()
				x.Start(nil, "test", BoundNS{})
				x.BlankLine()
				x.End(false)
			},
			Out: out(`
				<?xml version="1.0" encoding="UTF-8"?>
				<test>

				</test>
			`),
		},
		{
			Name: "ProcInstElementNoIndent",
			Do: func(x *XMLWriter) {
				x.DefaultProcInst()
				x.Start(nil, "test", BoundNS{})
				x.BlankLine()
				x.End(false)
			},
			Out: strings.TrimRight(out(`
				<?xml version="1.0" encoding="UTF-8"?><test></test>
			`), "\n"),
		},
		{
			Name: "EmptyXHTML",
			Do: func(x *XMLWriter) {
				xhtml := BoundNS{"http://www.w3.org/1999/xhtml", ""}
				x.Indent("\t")
				x.DefaultProcInst()
				x.Directive([]byte("DOCTYPE html"))
				x.Start(xhtml, "html", xhtml)
				x.Text(false, "\n")
				x.End(false)
			},
			Out: out(`
				<?xml version="1.0" encoding="UTF-8"?>
				<!DOCTYPE html>
				<html xmlns="http://www.w3.org/1999/xhtml">
				</html>
			`),
		},
		{
			Name: "ComplexXHTML",
			Do: func(x *XMLWriter) {
				xhtml := BoundNS{"http://www.w3.org/1999/xhtml", ""}
				svg := BoundNS{"http://www.w3.org/2000/svg", ""}
				xlink := BoundNS{"http://www.w3.org/1999/xlink", "xlink"}
				xlink1 := BoundNS{"http://www.w3.org/1999/xlink", "xlink1"} // for testing
				x.Indent("\t")
				x.DefaultProcInst()
				x.Directive([]byte("DOCTYPE html"))
				x.Start(xhtml, "html", xhtml)
				{
					x.Start(xhtml, "head")
					{
						x.Start(xhtml, "title")
						x.Comment(false, "")
						x.Text(false, "test")
						x.End(false)
					}
					{
						x.Start(xhtml, "link")
						x.Attr(xhtml, "rel", "stylesheet")
						x.Attr(xhtml, "href", "style.css")
						x.End(true)
					}
					x.End(false)
				}
				x.Comment(false, "test 1")
				x.Comment(false, "test 2")
				x.Comment(true, "test 3")
				x.Comment(true, "test 4")
				x.Comment(false, "test 5")
				{
					x.Start(xhtml, "body")
					{
						x.Start(xhtml, "p")
						x.Text(false, "sdfsdf")
						x.End(false)
					}
					{
						x.Start(xhtml, "p")
						x.Text(true, "sdfsdf")
						x.Text(true, "sdfsdf")
						x.End(false)
					}
					{
						x.Start(xhtml, "p")
						x.Text(true, "sdfsdf")
						x.Text(false, "sdfsdf")
						x.End(false)
					}
					{
						x.Start(xhtml, "p")
						x.Text(false, "sdfsdf")
						x.Text(false, "sdfsdf")
						x.End(false)
					}
					x.BlankLine()
					{
						x.Start(svg, "svg", svg)
						{
							x.Start(svg, "a", xlink)
							x.Attr(xlink, "href", "https://example.com")
							{
								x.Start(svg, "text")
								x.Attr(svg, "x", "0")
								x.Attr(svg, "y", "0")
								x.Text(false, "test")
								x.End(false)
							}
							x.End(false)
						}
						{
							x.Start(svg, "a", xlink1)
							x.Attr(xlink1, "href", "https://example.com/?asd=<&sdf")
							{
								x.Start(svg, "text")
								x.Attr(svg, "x", "0")
								x.Attr(svg, "y", "0")
								x.Text(false, "t<est\nsdf")
								x.End(false)
							}
							x.End(false)
						}
						x.End(false)
					}
					x.End(false)
				}
				x.End(false)
			},
			Out: out(`
				<?xml version="1.0" encoding="UTF-8"?>
				<!DOCTYPE html>
				<html xmlns="http://www.w3.org/1999/xhtml">
					<head>
						<title><!---->test</title>
						<link rel="stylesheet" href="style.css"/>
					</head><!--test 1--><!--test 2--><!--test 3-->
					<!--test 4--><!--test 5--><body>
						<p>sdfsdf</p>
						<p>
							sdfsdf
							sdfsdf
						</p>
						<p>
							sdfsdfsdfsdf</p>
						<p>sdfsdfsdfsdf</p>

						<svg xmlns="http://www.w3.org/2000/svg">
							<a xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://example.com">
								<text x="0" y="0">test</text>
							</a>
							<a xmlns:xlink1="http://www.w3.org/1999/xlink" xlink1:href="https://example.com/?asd=&lt;&amp;sdf">
								<text x="0" y="0">t&lt;est
				sdf</text>
							</a>
						</svg>
					</body>
				</html>
			`),
		},
		{
			Name: "BadAttrInsertionOrder",
			Do: func(x *XMLWriter) {
				x.Indent("\t")
				x.DefaultProcInst()
				x.Start(BoundNS{}, "test", BoundNS{})
				x.Text(false, "sdf")
				x.Attr(BoundNS{}, "sdf", "fgh")
				x.End(false)
			},
		},
		{
			Name: "InvalidSelfClosingElement",
			Do: func(x *XMLWriter) {
				x.Start(BoundNS{}, "test", BoundNS{})
				x.Text(false, "sdf")
				x.End(true)
			},
		},
		{
			Name: "InvalidDirective",
			Do: func(x *XMLWriter) {
				x.Directive([]byte(">"))
			},
		},
		{
			Name: "InvalidXMLProcInst",
			Do: func(x *XMLWriter) {
				x.Start(nil, "test", BoundNS{})
				x.ProcInst("xml", "sdfsdf")
				x.End(true)
			},
		},
		{
			Name: "InvalidProcInst1",
			Do: func(x *XMLWriter) {
				x.Start(nil, "test", BoundNS{})
				x.ProcInst("!", "sdf")
				x.End(true)
			},
		},
		{
			Name: "InvalidProcInst2",
			Do: func(x *XMLWriter) {
				x.Start(nil, "test", BoundNS{})
				x.ProcInst("sdf", "?>")
				x.End(true)
			},
		},
		{
			Name: "DirectiveValidation",
			Do: func(x *XMLWriter) {
				x.Indent("\t")
				x.Directive([]byte(`<!--<--> "><!---->"` + "\n" + ` <!--"<"--><<s>>`))
			},
			Out: out(`
				<!<!--<--> "><!---->"
				 <!--"<"--><<s>>>
			`),
		},
		{
			Name: "InvalidComment",
			Do: func(x *XMLWriter) {
				x.Comment(false, "-->")
			},
		},
		{
			Name: "Escaping",
			Do: func(x *XMLWriter) {
				x.Indent("\t")
				x.Start(BoundNS{}, "test", BoundNS{})
				x.Attr(BoundNS{}, "test", `"'&<>;`+"\t\n\r\xff")
				x.Text(true, `"'&<>;`+"\t\n\r\xff")
				x.End(false)
			},
			Out: out(`
				<test test="&quot;&apos;&amp;&lt;&gt;;&#x9;&#xA;&#xD;` + "\uFFFD" + `">
					&quot;&apos;&amp;&lt;&gt;;&#x9;
				&#xD;` + "\uFFFD" + `
				</test>
			`),
		},
		{
			Name: "SingleCommentIndent",
			Do: func(x *XMLWriter) {
				x.Indent("\t")
				x.Comment(false, "test")
			},
			Out: out(`
				<!--test-->
			`),
		},
		{
			Name: "ComplexNamespaces",
			Do: func(x *XMLWriter) {
				x.Indent("\t")
				ns1a := BoundNS{"", ""}
				ns2a := BoundNS{"https://example.com/ns2", "ns2a"}
				ns2b := BoundNS{"https://example.com/ns2", "ns2b"}
				ns2c := BoundNS{"https://example.com/ns2", ""}
				ns4a := BoundNS{"https://example.com/ns4", "ns4a"}
				ns4b := BoundNS{"https://example.com/ns4", ""}
				ns42 := BoundNS{"https://example.com/ns4", "ns2a"}
				{
					x.Start(ns1a, "nons", ns1a, ns2a)
					{
						x.Start(ns2a, "ns2", ns2b)
						{
							x.Start(ns2b, "ns2", ns2c)

							x.End(true)
						}
						{
							x.Start(ns2c, "ns2", ns2c, ns4a)
							{
								x.Start(ns2c, "ns2")
								x.Attr(ns2c, "ns2", "test")
								x.Attr(ns4a, "ns4", "test")
								x.End(false)
							}
							{
								x.Start(ns4b, "ns4", ns4b)
								x.Attr(ns2a, "ns2", "test")
								x.Attr(ns4b, "ns4", "test")
								x.End(true)
							}
							{
								x.Start(ns4b, "ns4", ns4b)
								x.Attr(ns2a, "ns2", "test")
								x.Attr(ns4b, "ns4", "test")
								x.End(true)
							}
							{
								x.Start(ns2c.URI, "ns2", ns4b)
								x.Attr(ns2a.URI, "ns2", "test")
								x.Attr(ns4a.URI, "ns4", "test")
								x.End(true)
							}
							{
								x.Start(ns4a.URI, "ns4")
								x.Attr(ns2a.URI, "ns2", "test")
								x.Attr(ns4a.URI, "ns4", "test")
								x.End(true)
							}
							{
								x.Start(ns4a.URI, "ns4", ns4b, ns42)
								x.Attr(ns2a.URI, "ns2", "test")
								x.Attr(ns4a.URI, "ns4", "test")
								{
									x.Start(ns1a.URI, "nons", ns1a)
									x.Attr(ns1a.URI, "nons", "test")
									x.Attr(ns4a.URI, "ns4", "test")
									{
										x.Start(nil, "curns")
										x.Attr(nil, "curns", "test")
										x.Attr(ns2a.URI, "ns2", "test")
										x.Attr(ns4a.URI, "ns4", "test")
										x.End(true)
									}
									{
										x.Start(Prefix(""), "el")
										x.Attr(nil, "curns", "test")
										x.End(true)
									}
									{
										x.Start(Prefix("ns2a"), "el")
										x.Attr(nil, "curns", "test")
										x.End(true)
									}
									x.End(false)
								}
								{
									x.Start(nil, "curns")
									x.Attr(nil, "curns", "test")
									x.End(true)
								}
								x.End(false)
							}
							{
								x.Start(nil, "curns")
								x.Attr(nil, "curns", "test")
								x.End(true)
							}
							x.End(false)
						}
						x.End(false)
					}
					x.End(false)
				}
			},
			Out: out(`
				<nons xmlns:ns2a="https://example.com/ns2">
					<ns2a:ns2 xmlns:ns2b="https://example.com/ns2">
						<ns2b:ns2 xmlns="https://example.com/ns2"/>
						<ns2 xmlns="https://example.com/ns2" xmlns:ns4a="https://example.com/ns4">
							<ns2 ns2="test" ns4a:ns4="test"></ns2>
							<ns4 xmlns="https://example.com/ns4" ns2a:ns2="test" ns4="test"/>
							<ns4 xmlns="https://example.com/ns4" ns2a:ns2="test" ns4="test"/>
							<ns2b:ns2 xmlns="https://example.com/ns4" ns2="test" ns4a:ns4="test"/>
							<ns4a:ns4 ns2b:ns2="test" ns4="test"/>
							<ns2a:ns4 xmlns="https://example.com/ns4" xmlns:ns2a="https://example.com/ns4" ns2b:ns2="test" ns4="test">
								<nons xmlns="" nons="test" ns2a:ns4="test">
									<curns curns="test" ns2b:ns2="test" ns2a:ns4="test"/>
									<el curns="test"/>
									<ns2a:el curns="test"/>
								</nons>
								<curns curns="test"/>
							</ns2a:ns4>
							<curns curns="test"/>
						</ns2>
					</ns2a:ns2>
				</nons>
			`),
		},
		{
			Name: "StickyError",
			Do: func(x *XMLWriter) {
				x.e = errors.New("test")
				x.DefaultProcInst()
				x.Start(nil, "test", BoundNS{})
				x.ProcInst("test", "test")
				x.Comment(false, "test")
				x.Raw([]byte("test"))
				x.Text(false, "test")
				x.Start(nil, "test")
				x.End(true)
				x.End(false)
			},
		},
		{
			Name: "Stuff",
			Do: func(x *XMLWriter) {
				x.DefaultProcInst()
				x.Start(nil, "test", BoundNS{})
				x.ProcInst("test", "test")
				x.Comment(false, "test")
				x.Raw([]byte("test"))
				x.Text(false, "test")
				x.Start(nil, "test")
				x.End(true)
				x.End(false)
			},
			Out: `<?xml version="1.0" encoding="UTF-8"?><test><?test test?><!--test-->testtest<test/></test>`,
		},
	} {
		tc := tc
		t.Run(tc.Name, func(t *testing.T) {
			var b bytes.Buffer
			x := New(&b)
			tc.Do(x)
			err1 := x.Err()
			if err := x.Close(); err != nil {
				if tc.Out != "" {
					t.Errorf("unexpected error: %v", err)
					t.Log(b.String())
				}
				if err1 != nil && err != err1 {
					t.Errorf("Err() does not return nothing or the same error: expected %v, got %v", err, err1)
				}
			} else {
				if tc.Out == "" {
					t.Errorf("expected error, got nil")
				} else if tc.Out != b.String() {
					t.Errorf("wrong output\nexpected:\n%s\ngot:\n%s\n", "    "+strings.ReplaceAll(tc.Out, "\n", "\n    "), "    "+strings.ReplaceAll(b.String(), "\n", "\n    "))
				}
				if !tc.NoValidate {
					d := xml.NewDecoder(&b)
					d.Strict = true
					for {
						if _, err := d.Token(); err != nil {
							if err != io.EOF {
								t.Errorf("invalid xml: %v", err)
								t.Log(b.String())
							}
							break
						}
					}
				}
			}
		})
	}
}
